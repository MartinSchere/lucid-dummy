import Core from 'core/types';
import { Blockfrost } from '../provider';
export declare type Provider = Blockfrost;
export declare type ProtocolParameters = {
    minFeeA: number;
    minFeeB: number;
    maxTxSize: number;
    maxValSize: number;
    keyDeposit: BigInt;
    poolDeposit: BigInt;
    priceMem: number;
    priceStep: number;
    coinsPerUtxoWord: BigInt;
};
export declare type Slot = number;
export interface ProviderSchema {
    getProtocolParameters(): Promise<ProtocolParameters>;
    getCurrentSlot(): Promise<Slot>;
    getUtxos(address: Address): Promise<UTxO[]>;
    getUtxosWithUnit?(address: Address, unit: Unit): Promise<UTxO[]>;
    getDatum?(datumHash: DatumHash): Promise<Datum>;
    awaitTx?(txHash: TxHash): Promise<boolean>;
    submitTx?(tx: Core.Transaction): Promise<TxHash>;
}
export declare type CredentialType = 'Key' | 'Script';
export declare type Unit = string;
export declare type Assets = {
    [unit: Unit]: BigInt;
};
export declare type ScriptType = 'Native' | 'Plutus';
export declare type Script = string;
export declare type PolicyId = string;
export declare type MintingPolicy = {
    type: ScriptType;
    script: Script;
};
export declare type SpendingValidator = {
    type: ScriptType;
    script: Script;
};
export declare type CertificateValidator = {
    type: ScriptType;
    script: Script;
};
export declare type WithdrawalValidator = {
    type: ScriptType;
    script: Script;
};
export declare type Address = string;
export declare type RewardAddress = string;
export declare type PaymentKeyHash = string;
export declare type StakeKeyHash = string;
export declare type TxHash = string;
export declare type PoolId = string;
export declare type Datum = string;
export declare type DatumHash = string;
export declare type Redeemer = string;
export declare type Lovelace = BigInt;
export declare type Label = number;
export declare type RawUTxO = string;
export declare type PrivateKey = string;
export declare type UTxO = {
    txHash: TxHash;
    outputIndex: number;
    assets: Assets;
    address: Address;
    datumHash?: DatumHash;
    datum?: Datum;
};
export declare type AddressType = 'Base' | 'Enterprise' | 'Pointer' | 'Reward';
export declare type Network = 'Mainnet' | 'Testnet';
export declare type AddressDetailed = {
    type: AddressType;
    credentialType: CredentialType;
    address: string;
    paymentKeyHash?: PaymentKeyHash;
    stakeKeyHash?: StakeKeyHash;
};
export interface ExternalWallet {
    address: Address;
    utxos: RawUTxO[];
    collateral?: RawUTxO[];
    rewardAddress?: RewardAddress;
}
export interface Wallet {
    address: Address;
    rewardAddress?: RewardAddress;
    getCollateral(): Promise<UTxO[]>;
    getCollateralCore(): Promise<Core.TransactionUnspentOutput[]>;
    getUtxos(): Promise<UTxO[]>;
    getUtxosCore(): Promise<Core.TransactionUnspentOutputs>;
    signTx(tx: Core.Transaction): Promise<Core.TransactionWitnessSet>;
    submitTx(signedTx: Core.Transaction): Promise<TxHash>;
}
export declare const EmptyData: string;
export declare type WalletProvider = 'nami' | 'eternl' | 'flint';
export declare type Json = any;
export declare type UnixTime = number;
