import Core from 'core/types';
import { Address, Assets, CertificateValidator, Datum, Json, Label, Lovelace, MintingPolicy, PoolId, Redeemer, RewardAddress, SpendingValidator, UnixTime, UTxO, WithdrawalValidator } from '../types';
import { TxComplete } from './txComplete';
export declare class Tx {
    txBuilder: Core.TransactionBuilder;
    static new(): Tx;
    collectFrom(utxos: UTxO[], redeemer?: Redeemer): this;
    mintAssets(assets: Assets, redeemer?: Redeemer): this;
    payToAddress(address: Address, assets: Assets): this;
    payToContract(address: Address, datum: Datum, assets: Assets): this;
    delegateTo(rewardAddress: RewardAddress, poolId: PoolId, redeemer?: Redeemer): this;
    registerStake(rewardAddress: RewardAddress): this;
    deregisterStake(rewardAddress: RewardAddress, redeemer?: Redeemer): this;
    withdraw(rewardAddress: RewardAddress, amount: Lovelace, redeemer?: Redeemer): this;
    addSigner(address: Address | RewardAddress): this;
    validFrom(unixTime: UnixTime): this;
    validTo(unixTime: UnixTime): this;
    attachMetadata(label: Label, metadata: Json): this;
    attachMetadataWithConversion(label: Label, metadata: Json): this;
    attachSpendingValidator(spendingValidator: SpendingValidator): this;
    attachMintingPolicy(mintingPolicy: MintingPolicy): this;
    attachCertificateValidator(certValidator: CertificateValidator): this;
    attachWithdrawalValidator(withdrawalValidator: WithdrawalValidator): this;
    applyIf(condition: boolean, callback: (tx: Tx) => void): this;
    complete(): Promise<TxComplete>;
}
