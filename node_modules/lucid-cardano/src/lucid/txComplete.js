import { C } from '../core';
import { Lucid } from './lucid';
import { TxSigned } from './txSigned';
export class TxComplete {
    constructor(tx) {
        this.txComplete = tx;
        this.witnessSetBuilder = C.TransactionWitnessSetBuilder.new();
        this.witnessSetBuilder.add_existing(this.txComplete.witness_set());
    }
    async sign() {
        const witness = await Lucid.wallet.signTx(this.txComplete);
        this.witnessSetBuilder.add_existing(witness);
        return this;
    }
    signWithPrivateKey(privateKey) {
        const priv = C.PrivateKey.from_bech32(privateKey);
        const witness = C.make_vkey_witness(C.hash_transaction(this.txComplete.body()), priv);
        this.witnessSetBuilder.add_vkey(witness);
    }
    complete() {
        const signedTx = C.Transaction.new(this.txComplete.body(), this.witnessSetBuilder.build(), this.txComplete.auxiliary_data());
        return new TxSigned(signedTx);
    }
}
//# sourceMappingURL=txComplete.js.map